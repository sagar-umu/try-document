{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Building Documentation","text":"<p>This guide defines steps for hosting your GitHub repository using Read the Docs or GitHub Pages. We will use MkDocs material theme for visual upgrades. MkDocs uses markdown (.md) files as input. </p>"},{"location":"#resources","title":"Resources","text":"<ol> <li>Read the Docs</li> <li>MkDocs</li> <li>GitHub Pages</li> </ol>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ol> <li>Python</li> <li>An integrated development environment like VSCode</li> </ol>"},{"location":"#steps","title":"Steps","text":""},{"location":"#set-up","title":"Set-up","text":"<ol> <li> <p>On your local machine clone your GitHub repository of interest using the Clone Git Repository option.</p> </li> <li> <p>Create a <code>/docs</code> directory in your repository.</p> <p>Info</p> <p>Both Read the Docs and MkDocs use <code>/docs</code> as their source directory by default.</p> </li> <li> <p>If you want to use an existing <code>README.md</code> file as the landing page for your documentation, move it to <code>/docs</code>, otherwise create an <code>index.md</code> file in <code>/docs</code>.</p> <p>Info</p> <p>MkDocs can use both <code>README.md</code> and <code>index.md</code> to render the HTML. However, if both files are present in a directory, it will use <code>index.md</code> as the default.</p> </li> <li> <p>Create a <code>requirements.txt</code> file in the root directory and copy this code into it:</p> <pre><code>mkdocs&gt;=1.5\nmkdocs-material\nmkdocs-awesome-pages-plugin\nmkdocs-git-revision-date-localized-plugin\nmike\nmkdocs-macros-plugin\n</code></pre> </li> <li> <p>If you want directories (and their contents) from your repository to be visible on the webpage, they will need:         - to be in the <code>docs</code> directory         - an <code>index.md</code> file of their own     You can either copy the directories/files of interest to the <code>/docs</code> directory or</p> <p>Tip</p> <p>You can automate the cloning of directories using the following script:</p> <p> Show Python code <p><pre><code>import os\nimport shutil\n\nREPO_ROOT = \".\"\nDOCS_DIR = \"docs\"\n\nEXCLUDE_DIRS = {\n    DOCS_DIR, \".git\", \".github\", \"site\", \"venv\", \".venv\", \"__pycache__\", \".mypy_cache\"\n}\n\nEXCLUDE_FILES = {\n    \"mkdocs.yml\", \"requirements.txt\", \"readthedocs.yml\", \"clone_directories_to_docs.py\"\n}\n\ndef should_copy(src, dst):\n    return not os.path.exists(dst) or os.path.getmtime(src) &gt; os.path.getmtime(dst)\n\ndef safe_copytree(src, dst):\n    for root, dirs, files in os.walk(src):\n        rel_path = os.path.relpath(root, src)\n        dst_root = os.path.join(dst, rel_path) if rel_path != '.' else dst\n        os.makedirs(dst_root, exist_ok=True)\n\n        for file in files:\n            src_file = os.path.join(root, file)\n            dst_file = os.path.join(dst_root, file)\n\n            if file.endswith(\".md\"):\n                if should_copy(src_file, dst_file):\n                    shutil.copy2(src_file, dst_file)\n                    print(f\"Updated .md file: {dst_file}\")\n                else:\n                    print(f\"Skipped unchanged .md: {dst_file}\")\n            else:\n                shutil.copy2(src_file, dst_file)\n                print(f\"Copied file: {dst_file}\")\n\ndef remove_excluded_dirs_from_docs():\n    if not os.path.exists(DOCS_DIR):\n        return\n\n    existing_docs_dirs = os.listdir(DOCS_DIR)\n    for excluded in EXCLUDE_DIRS:\n        excluded_name = os.path.basename(excluded)\n        full_path = os.path.join(DOCS_DIR, excluded_name)\n        if excluded_name in existing_docs_dirs and os.path.isdir(full_path):\n            print(f\"Removing excluded dir from docs: {full_path}\")\n            shutil.rmtree(full_path)\n\ndef clone_repo_dirs():\n    os.makedirs(DOCS_DIR, exist_ok=True)\n    remove_excluded_dirs_from_docs()\n\n    for entry in os.listdir(REPO_ROOT):\n        src_path = os.path.join(REPO_ROOT, entry)\n        if entry in EXCLUDE_DIRS or entry in EXCLUDE_FILES or entry.startswith(\".\"):\n            continue\n\n        dst_name = \"Templates\" if entry == \"templates\" else entry\n        dst_path = os.path.join(DOCS_DIR, dst_name)\n\n        if os.path.isdir(src_path):\n            print(f\"Cloning folder: {entry} \u2192 {dst_name}/\")\n            safe_copytree(src_path, dst_path)\n        elif os.path.isfile(src_path) and entry.endswith(\".md\"):\n            dst_file = os.path.join(DOCS_DIR, entry)\n            if should_copy(src_path, dst_file):\n                shutil.copy2(src_path, dst_file)\n                print(f\"Copied root .md file: {entry}\")\n            else:\n                print(f\"Skipped unchanged root .md: {entry}\")\n\nif __name__ == \"__main__\":\n    clone_repo_dirs()\n</code></pre> </p> <li> <p>Create a <code>mkdocs.yml</code> file in the root directory and add the following content:</p> <p> Show mkdocs.yml <p><pre><code>site_name: UPSCb Common Documentation\nsite_url: https://your-username.github.io/Documentation_example/\n\ndocs_dir: docs\nsite_dir: site\n\ntheme:\n  name: material\n  language: en\n  palette:\n    - scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Switch to dark mode\n      primary: light blue\n      accent: purple\n    - scheme: slate\n      toggle:\n        icon: material/toggle-switch\n        name: Switch to light mode\n      primary: indigo\n      accent: deep purple\n  features:\n    - navigation.tabs\n    - navigation.tabs.sticky\n    - navigation.sections\n    - toc.follow\n    - search.suggest\n    - search.highlight\n    - content.tabs.link\n    - content.code.annotation\n    - content.code.copy\n\nextra:\n  version:\n    provider: mike\n\nplugins:\n  - search\n  - awesome-pages\n  - git-revision-date-localized:\n      type: date\n      fallback_to_build_date: true\n  - mike\n  - macros\n\nmarkdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n</code></pre> </p> <li> <p>Set up GitHub Pages deployment:</p> <ul> <li>In your root directory, create: <code>.github/workflows/</code></li> <li>Inside that, create a file <code>ci.yml</code> with the following contents:</li> </ul> <p> Show ci.yml <p><pre><code>name: ci\n\non:\n  push:\n    branches:\n      - main\n      - master\n\npermissions:\n  contents: write\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - uses: actions/cache@v3\n        with:\n          key: ${{ github.ref }}\n          path: .cache\n\n      - run: pip install -r requirements.txt\n      - run: python clone_directories_to_docs.py\n      - run: mkdocs gh-deploy --force\n</code></pre> </p> <li> <p>Configuration file for ReadtheDocs     If you want to host the documentation on ReadtheDocs you will also need a <code>.readthedocs.yml</code> file. You can create this file and copy the code below to it. </p> <p> Show .readthedocs.yml <p><pre><code>    version: 2\n\n    build:\n      os: ubuntu-22.04\n      tools:\n       python: \"3.10\"\n\n    python:\n      install:\n        - requirements: requirements.txt\n\n    mkdocs:\n      configuration: mkdocs.yml\n</code></pre> </p> <li> <p>You are now ready to build your webpage.</p> </li>"},{"location":"#building-and-deploying-webpage","title":"Building and deploying webpage","text":"<ol> <li> <p>Using mkdocs to deploy locally for testing. This is a great way of visualizing how your webpage will look once rendered. Follow these steps:  </p> <ul> <li>Navigate to the repository directory on your local machine</li> <li>Create a virtual python environment by <code>python -m venv venv</code></li> <li>Activate the environemnt: <code>source venv/bin/activate</code></li> <li>Install required plug-ins from the requirements.txt file: <code>pip install -r requirements.txt</code></li> <li>OPTIONAL: If you are copying the directories into the <code>/docs</code> dir. using the python script you can do that now by running the script. </li> <li>Build and serve your webpage: <code>python -m mkdocs serve</code></li> <li>Your webpage should be available on localhost <code>http://127.0.0.1:8000/....</code></li> </ul> </li> <li> <p>Hosting on GHPages. Hosting on GHPages involves taking the following steps:</p> <ul> <li>Make sure that you have committed and pushed the additional changes and files to your GH repository (repo).</li> <li>Once your repo is up-to-date navigate to your repo and navigate to Settings &gt; Pages and select <code>Deploy from a branch</code> under the Build and Deployment menu. </li> <li>Under Branch select <code>gh-pages</code> and <code>/root</code> from the drop-down menus and click save</li> <li>Once you have done these steps, a link to your webpage should appear on top of the same page. You can visit your site from there.</li> </ul> </li> <li> <p>*Using Read the Docs</p> <ul> <li>Follow the tutorial here</li> <li>You already have all the files you need, so the webpage should build automatically.</li> </ul> </li> </ol>"}]}